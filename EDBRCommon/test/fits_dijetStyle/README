**************
Dijet-like fit
**************

0) Setup "Combine" tool 

   > cmsenv (from CMSSW directory)

   - Make sure the latest version of "combine" (HiggsAnalysis/CombinedLimit) 
     is uploaded and compiled. 
     See https://twiki.cern.ch/twiki/bin/viewauth/CMS/SWGuideHiggsAnalysisCombinedLimit 
     NOTE: the following code has been tested in CMSSW_5_3_3_patch3 and CMSSW_5_3_7 with V02-07-00
     NOTE: the following code has been tested in CMSSW_5_3_9 with V02-07-03
     NOTE1: need to load lib (see below under R2JJFitter.cc)

1) Make fits and workspaces

  - Edit : R2JJFitter.cc
    - Details at [1]    
    - need to load gSystem->Load("$CMSSW_BASE/lib/slc5_amd64_gcc462/libHiggsAnalysisCombinedLimit.so");

  - Edit : ProduceWorkspaces_local.py
    - mass range
    - OUTPUTDIR

  - Run : python ProduceWorkspaces_local.py 

    (wait few minutes...)

2) Combine datacards

  - Move to workdir : cd OUTPUTDIR/datacards (specified at point 1)

  - Edit : make_combined_cards.sh
  
  - Edit : masses.txt

  - Run : 
    BASH: for M in $( cat masses.txt ); do ./make_combined_cards.sh $M ; done 
    TCSH: foreach M ( `cat masses.txt` ); ./make_combined_cards.sh $M ; end

3) Run "combine" tool

  - Clean : clean /tmp/USERNAME directory (just to be sure...)

  - Edit : combine_exec.sh
    - change input directory to match OUTPUTDIR (specified at point 1)
    - OPTIONAL : modify the "combine" options (at the end of the file) 
                 (for example "-S 0" to switch off systematics, "-t 1" for pseudo-data, etc..) 

  - Edit : parallelizeCombine.sh

  - Run :
    BASH: for M in $( cat masses.txt ); do ./parallelizeCombine.sh $M ; done
    TCSH: foreach M ( `cat masses.txt` ); ./parallelizeCombine.sh $M ; end

    (wait few minutes [for Asymptotic]...)

4) Merge output of "combine" tool

  - Clean directory: rm -f harvestedTrees/*
    
  - Edit : mergeCombinationTrees.sh
    - should be consistent with the settings (i.e. algo, label, datacards) 
      choosen in combine_exec.sh (at point 3)

  - Run : 
    BASH: for M in $( cat masses.txt ); do ./mergeCombinationTrees.sh $M ; done
    TCSH: foreach M ( `cat masses.txt` ); ./mergeCombinationTrees.sh $M ; end
    
  - Edit : mergeHarvestedCombinationTrees.sh
    - should be consistent with the settings (i.e. label)
      choosen in combine_exec.sh (at point 3) 

  - Run : ./mergeHarvestedCombinationTrees.sh

5) Plot limits

  - Edit : plot_golfcourse_Asymptotic.C
    - ScaleFactorSignal  
      - must be the same defined at point 1) in R2JJFitter.cc
    - isZZChannel
    - x axis range: if(!isZZChannel){fr_left=1000.0, fr_down=0.0000005,fr_right=2500.0,fr_up=10.0;}
    - TFile *fFREQ=new TFile("higgsCombineEXOZZ.Asymptotic.TOTAL.root","READ");
    - string xsect_file_th="../data/xsect_BulkG_ZZ (or WW) _c0p2_xsect_in_pb.txt"; 
      - should contain "sigma x BR(VV)" --> if you want to get limits on sigma X BR(VV)
      - should match with the cross section model used to predict the signal rates in point 1
    - string xsect_file_interpol2="../data/xsect_BulkG_ZZ_c0p5_xsect_in_pb.txt";
      - this is just a second cross section file plotted in the final limit

  - Run : 
    root -b 
    .L plot_golfcourse_Asymptotic.C+
    plot_golfcourse_Asymptotic(true) [unblind data]      
    plot_golfcourse_Asymptotic(false) [blind data]      

6) Plot significance
  
  - Edit: plot_Significance.C
    -   TFile *fexp=new TFile("higgsCombineEXOZZExpSignif.ProfileLikelihood.TOTAL.root","READ");
    -   TFile *fobs=new TFile("higgsCombineEXOZZObsSignif.ProfileLikelihood.TOTAL.root","READ");
    -   XMIN=800; XMAX=2500;

  - Run : 
    root -b 
    .L plot_Significance.C+
    plot_Significance(true) [unblind data]      
    plot_Significance(false) [blind data]      


--------------------------------------------------------------------------------------


[1] Details on R2JJFitter.cc code. Things to possibly edit:

    - the mass variable must be called "mZZ" (or substitute in many places in the code)
    - NCAT
    - MMIN, MMAX (should be consistent with range defined in **** below)
    - BINSIZEPLOT (for main analysis) , BINSIZEPLOTSIGNAL (for signal shapes) , BINSIZEPLOTTEST (for the F-test)
    - defineVariables
    - TString fileBaseName(TString::Format("Xvv.mX%d_ZZ_8TeV"
    - TString fileBkgName(TString::Format("Xvv.inputbkg_8TeV"
    - TString card_name("Xvv_models_Bkg_8TeV_test.rs");  ****
    - ReadFromFile 
      - the file structure should be consistent with the ones used at:  
        http://cmssw.cvs.cern.ch/cgi-bin/cmssw.cgi/UserCode/ExoDiBosonResonances/EDBRCommon/test/fits/shape/pars/outpars_BulkG_WW_lvjj_c0p2_M1600_xww_1J_LP_ELE.config?revision=1.1&view=markup (example of WW)
    - AddSigData 
      - TString inDir
      - TFile sigFile1
      - TString mainCut
      - Float_t Lum
      - TTree* sigTree1
    - AddBkgData         
      - TString inDir 
      - TFile dataFile
      - TString mainCut
      - TTree* dataTree  
      - LumForBkg   
      - IMPORTANT: change lines of code depending if you use real data (no weight) or MC (weighted to LumForBkg)
    - SigModelFit 
      - ifstream myfile(TString::Format("../fits/shape/pars/outpars_BulkG_WW_lvjj_c0p2_M1000_xww_%dJ__ELE.config",
        - nxj , leptType_str (if one changes the category definition)      
      - bool weHaveAFileForThis = ((iMass%100)==0) , int lowTag = iMass-50; int highTag = iMass+50; etc..  
        is hardcoded (specific for X-->ZZ). 
        If you provide the mass values for which you do have files, you never call this part of the code. 
      - bool redoFit = false; --> leave it false if you read from an other file with the shapes
    - BkgModelFitBernstein
      - decide fit function 
      - int nparameters = XXX;     
      - PAR3 constant? ((RooRealVar*) w->var(TString::Format("mgg_bkg_8TeV_slope3_cat%d",c)))->setConstant(true); 
    - BkgModelTest 
      - nothing to modify by default (except if you want to test different fit functions)
      - this code is run by default to perform tests of the fit functions and an F-test to decide how many 
        parameters should be used to the main function in the analysis
      - The result of the f_test are printed in the std out under the string "Starting F-Test evaluation with alpha-value" 
        for each category 
    - MakeBkgWS
      - wAll->factory(TString::Format("CMS_hgg_bkg_8TeV_slope3_cat%d[%g,%g,%g]", c, mean, mean, mean)); //P3 fixed
    - MakeDataCard_1Channel
      - ScaleFactorSignal
      - Change systematics if needed


[2] Things to fix/check
    a) why log files are not visible when running step 3 locally?
    b) check scripts to run step 3) in batch
    c) check scripts to make significance plots
    d) how to include systematic uncertainties due to different background shapes?
