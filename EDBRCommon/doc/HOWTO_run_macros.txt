For plotting macros:
1. Edit EDBRHistoMaker.h for cuts and binning
2. Edit loopPlot.C for options
3. run
root -l -b loopPlot.C++



For plotting macros, ww: 
This macro will use a fixed legend from group2 to syncronize the plots. The 
legend will be read from 'legend.root'.
You need to goto  ExoDiBosonResonances/EDBRCommon/rootmacros/WWplots/.
All the changes need OLNY to be done in loopPlot.C. (somehow smarter than
before)
There are options for ele/mu, LP/ALLP/HP, signal,sideband,or signal+sideband.

change the ratio for signal here: (note this code is not smart for this number. only 60000 and 30000 can appear on the legend. You can modify EDBRHistoPlotter.h for other numbers)
  const int nMCSig=1;//set to zero if you don't want to plot
  std::string mcLabelsSig[nMCSig]={"BulkG_WW_inclusive_c0p2_M1500_xww"
                                  };  
  double kFactorsSig_array[nMCSig] = {60000};//60000 for mu, 30000 for ele (PAS)

---
NOTE: If you want to do ttbar control region plots, please be careful to change the 
following:
1.  ues signal+sideband range
bool wantSideband  = true; // Will make histograms for sideband region
bool wantSignal    = true; // Will make histograms for signal region
2.  the option for tt control
bool isTTcontrol   = true;   //if ttbar control region
3.  use the tt control tree
std::string
pathToTrees="/afs/cern.ch/work/s/shuai/public/diboson/trees/productionv12/ttbarcontrol/";
4.  change the output name also
std::string outputDir = "./plots_WW_mu_fullrange_btagCM_HP_v12_ratio_v1"; (or
whatever you like)
5. use this list to dral ttbar on top
  //list for ttbar control region (draw ttbar on top)
  std::string mcLabels[nMC]={
                "SingleTop_xww",
                "VV_xww",
                "WZJets_xww",
                "TTBARpowheg_xww"
                 };
6. use no signal
  const int nMCSig=0;//set to zero if you don't want to plot
  std::string mcLabelsSig[nMCSig]={
                                  };
  double kFactorsSig_array[nMCSig] = {};

At the end, do root -l -b loopPlot.C++
















For optimization of nsubjetness
1. Edit OptimizationMaker.h for cuts
2. Edit optimizer.C for Options
3. Edit ROCcurves.C fpr the percent for masswindow. Default double masswindow = 0.15;
4. run
root -l -b optimizer.C++
root -l -b ROCcurves.C


For signal efficiency
1. Edit absolute_eff.C, change inputpath and isZZChannel
2. run
root -l -b absolute_eff.C
3. Find the plots of 6 categories and efficiencies_MCSig.txt in SignalEffPlots/


--------------------
Create trees after cuts
go to ExoDiBosonResonances/EDBRCommon/test
Edit the options in createTreesClosureTest_xww.C
and run with 
root -l -b createTreesClosureTest_xww.C++


---------------------
ttbar scale factor
cd ExoDiBosonResonances/EDBRCommon/test/fits
Edit the path in ttbar_scale.C
NOTE: the tree should use ttbarcontrol->Create trees after btagM selection
run with
root ttbar_scale.C

read the numbers in ttbar_scale_plots/ttbar_scale_factor.txt 


-----------------
VJets normalization :

#### NOTE: the following instructions apply to the WW case,
#### for the ZZ things work in the same way just using a different python
#### script ("ZJets_norm.py" instead of "shuai_exo_doFit_class.py")

1. create special unrolled trees. The format is slightly different from
what is needed in the rest of the stat analysis.

cd ExoDiBosonResonances/EDBRCommon/test/fits/
# edit paths and outputs in unroll_trees.C
root -b
[0] .L unroll_trees.C++
[1] unroll_trees()

2. put sample in Data
cd ExoDiBosonResonances/EDBRCommon/test/fits/WJetsNormalization/Data/
# Edit Path and filenames in cp.sh such that they match 
# what is required in shuai_exo_doFit_class.py
sh cp.sh

3. compile
cd PDFs 
cmsenv
rt -b
gSystem->AddIncludePath("-I$ROOFITSYS/include")

4. put the ttbar scale factors in 
shuai_exo_doFit_class.py, line 206

5. run
read the numbers in the last line of the print out
For the analysis
python shuai_exo_doFit_class.py  -c 0  
python shuai_exo_doFit_class.py  -c 1  
python shuai_exo_doFit_class.py  -c 2  
python shuai_exo_doFit_class.py  -c 3  
For closure test A->B
python shuai_exo_doFit_class.py -c 0 --closuretest 2   
python shuai_exo_doFit_class.py -c 1 --closuretest 2   
python shuai_exo_doFit_class.py -c 2 --closuretest 2   
python shuai_exo_doFit_class.py -c 3 --closuretest 2   

6. the macro will create plots for each category. The normalization
to apply to the bkgd prediction will be printed at the last line 
of the (long) log of the macro (the variable is called
"rrv_number_WJets0_in_mj_signal_region_from_fitting_xx", where xx= el or mu).
These numbers should be put inside fitBackground.cpp in order to be used
when estimating the background from the fits.


------------
Background estimation

Edit options in Config_XWW.h
For closure test A->B: const std::string InTreeName="SelectedCandidatesAB";
For the analysis: const std::string InTreeName="SelectedCandidates";

put the ttbar scale factor in fitSidebands.cpp
put wjets normalization in fitBackground.cpp

run:
rm -f fitSidebands fitBackground  SidebandFitter.o
make fitSidebands
./fitSidebands
make fitBackground
./fitBackground

Do it twice with string leptType="ELE"; and string leptType="MU";

------------------
Create datacrads

replace efficiencies_MCSig_xww.txt with the latest one
rm create_datacards
make create_datacards
./create_datacards

Do it twice with string leptType="ELE"; and string leptType="MU";







